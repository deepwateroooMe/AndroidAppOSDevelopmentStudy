#+latex_class: cn-article
#+title: 安卓多进程应用总结: 安卓多进程相关
#+author: deepwaterooo

* 安卓进程优先级排序
- 亲爱的表哥的活宝妹，要百尺杆头更进一步。这次把先前，一两年前的 22 年头的那些，当时看似复杂的原理，全部弄清楚明白。【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】
- *真是奇怪呀，亲爱的表哥的活宝妹昨天晚上吃葫萝卜，早上来，第一个 .org 文档的字体还狠大，喝一杯含 50mg 咖啡因的茶包后，字体就又变小了！！！* 【亲爱的表哥的活宝妹，已经忘记这事儿了，这个文档是什么时候最后一次修改的【1/17 最后一次提交的。在那之前】？还是最近一两个月的事，说明 *咖啡因真的是，伤亲爱的表哥的活宝妹、脆弱的肾脏！* 】这里，想要查询一下 git 的用法：查找这个文件 multiProcess.org 文档的创建日期、最后一次修改提交日期等，看看上面的、亲爱的表哥的活宝妹、叹过的观察，是什么时候？
- 亲爱的表哥的活宝妹，又使劲拔头发，在想：
  - 亲爱的表哥的活宝妹，是从 22 年三四月份开始喝咖啡的；除了那年八月地沟油剧性中毒极度伤肾、腰巨痛了一个多星期后就出现了双眼飞蚊症，并且自那以后，飞蚊症就再也没有消失过；
  - 在接近两年的喝咖啡【泡咖啡喝】的时段里，除了最近，严格地说，直到今天，亲爱的表哥的活宝妹，从来不曾意识到，亲爱的表哥的活宝妹喝咖啡，会伤肾伤耳朵、伤肝伤眼睛、伤害亲爱的表哥的活宝妹的健康到这种程度
  - 这，一方面说明， *咖啡【多态必，以剂量依赖性？量变到质变的过程？改变了咖啡摄入量与心肌枉死、高血压、空腹血糖受损风险之前的关系】。* 用亲爱的表哥的活宝妹自己的话说，就是两个的咖啡剂量、量变引起质量，伤害亲爱的表哥的活宝妹的肾脏，到了一个、肾脏健康相对 critical 的阶段
  - 另一方面，亲爱的表哥的活宝妹，觉得也是在说，在前一个月，亲爱的表哥的活宝妹多次极度失眠、伤肝伤肾、偏方鲜蒜严重伤害到了亲爱的表哥的活宝妹的眼睛等、亲爱的表哥的活宝妹的免疫力下降之后，各种耳鸣、飞蚊、炎症等症状加重；在亲爱的表哥的活宝妹的免疫力，尚没能完全恢复、没能恢复到一个相对健康正常的状态，这几天1/13 换了个咖啡壶之后的咖啡剂量，每天两次的 critical 的咖啡剂量、与亲爱的表哥的活宝妹每天仔细观察、一再想要恢复的眼睛视力的现严重受伤、努力恢复的 critical 状态之间，观察到了，这个 *【咖啡一再伤害，亲爱的表哥的活宝妹脆弱肾脏、肝脏伤及眼睛】* 的现象。
  - 它，可能是说，亲爱的表哥的活宝妹，不适合重剂量喝咖啡，戒掉最安全，对健康可能最好；
  - 它，可能也是在说，亲爱的表哥的活宝妹的身体健康、免疫力还没能恢复正常。 *在现目前、努力恢复眼睛视力的相对 critical 状态下，咖啡因的摄入量，成为了左右亲爱的表哥的活宝妹眼睛视力的抑制因素。* 但是当亲爱的表哥的活宝妹的肾脏养好、再强大一点儿，咖啡因，可能并不能再如今天，【在现目前、努力恢复眼睛视力的相对 critical 状态下】，对亲爱的表哥的活宝妹的肾脏、与相连接的肝脏眼睛受损，造成如今天这么大的影响。
  - 所以，亲爱的表哥的活宝妹，不必过于悲观。 *积极锻炼，努力观察，等亲爱的表哥的活宝妹的视力恢复得好一点儿，咖啡因可能不会再是问题。*
  - *【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】*
- 对心脏方面，观察到的，去年上半年因为午休习惯，出现在经常性的心跳漏拍，但后来午休习惯改了就少了；最近几个月，是心悸？就是间隔性的、过段时间，感受心脏奇异跳动一下【心脏正常是在跳动但没感觉；偶尔奇异感受到的，不知道算不算是叫心悸】，出现的频率在增加。还有仅只发生过一次的、爸妈知会女儿的【室上性心动过速】。
- 可以网络搜索一下：早餐怎么吃多一点儿，而不是 *【只两片面包加一大杯咖啡】* 的话，会不会保护心脏好一点儿。
- *【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】*
- *【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】*
* 【多进程应用：使用场景】好处
** 1.分散内存的占用
- 我们知道Android系统对每个应用进程的内存占用是有限制的，而且占用内存越大的进程，通常被系统杀死的可能性越大。让一个组件运行在单独的进程中，可以减少主进程所占用的内存，避免OOM问题，降低被系统杀死的概率。
** 2.子进程和主进程崩溃互不影响
- 我们在子进程长时间运行，比如音乐，推送等，如果子进程崩溃了，不会影响主进程。反之主进程崩溃了，不会影响子进程的功能使用。
** 3.实现守护进程
- 如果主线程中的服务要从开机起持续运行，若由于内存等原因被系统kill掉，守护进程可以重新启动主线程的服务。
- 通过JNI利用C/C++，调用fork()方法来生成子进程，一般开发者会利用这种方法来做一些daemon（守护进程）进程，来实现防杀保活等效果。 *【这个，得找个具体的例子，才会真正懂。现在仍然是一知半解】*
- 使用多进程可以解决一些特殊的问题，例如： *【继上面之后，这就成为另一种表述】*
  - （1）内存优化：当 APP 运行时，系统会为其分配一定的内存空间。在单进程应用中，如果内存占用过大，会导致应用崩溃。通过将 APP 拆分成多个进程，可以使每个进程的内存占用更小，从而降低 APP 崩溃的概率。多进程应用可以更好地利用系统资源，从而提升应用的稳定性和性能。
  - （2）并行处理：多进程可以同时处理多个任务，提高了 APP 的性能和响应速度。
  - （3）保障进程的稳定性：当一个进程发生崩溃时，其他进程不会受到影响，从而保障了整个 APP 的稳定性。
  - （4）提高应用的安全性：通过将一些重要的任务放在独立的进程中运行，可以避免其他进程的干扰，从而提高应用的安全性。
  - （5）实现应用的模块化：多进程应用可以将不同的模块运行在不同的进程中，从而实现应用的模块化。这样可以降低模块之间的耦合度，提高代码的可维护性和可扩展性

* 开启多进程模式: 【这里没看懂，怎么把两个应用的组件配置在同一进程中，目的，使用场景上下文等，没想明白】
- Android 中开启多进程是在四大组件中配置 android:process  属性来开启多进程，配置时可以配置成私有进程和全局进程，如下：
#+begin_SRC xml
<!--com.manu.progress:remote-->
<activity 
    android:name="com.manu.process.SampleActivity"
    android:process=":remote"/>
<!--全局进程-->
<!--com.manu.remote-->
<activity 
    android:name="com.manu.process.SampleActivity"
    android:process="com.manu.remote"/>
#+END_SRC
- 如果配置成私有进程，则其他应用的组件不可与其跑在同一个进程中，如果配置全局进程，则可以将两个应用设置成相同的 ShareUID 将两个应用的组件运行在同一个进程中，除此之外这两个应用的签名也得相同，这样将可将两个应用的组件运行在同一进程中，且可以共享私有数据如 data 目录等。
- 那么怎么将两个应用的组件配置在同一进程呢？
  - 两个应用设置相同的 ShareUID
  - 两个应用的两个组件的进程设置成进程名相同的全局进程
  - 两个应用签名相同
- 测试过程中发现，如果一个进程已经启动了，在启动一个配置同一进程的组件时，第二个应用程序会异常退出，这一点还需阅读源码进一步了解原因.
- 怎么将两个应用的组件配置在同一进程呢？
* Android多进程运行机制
- Android 为每个进程分配一个独立的虚拟机，不同的虚拟机在内存分配上有不同的地址空间，这就导致在不同的虚拟机中访问同一个类的对象会产生多份副本，也就是说在两个进程中存在着同一个类的两个副本，这两个类互不干扰，修改一个不会影响另一个，这就导致了一个问题，即运行在不同进程中的四大组件，只要它们之间通过内存来共享数据，都会共享失败，多进程造成的问题如下：
** 静态成员和单例模式完全失效 
- 多进程中在着一个类的多个副本 *【每个进程，有个自己的版本】* ，修改互不影响，自然无法生效；
** 线程同步机制完全失效
- 线程同步机制锁住的不是一个对象 *【每个进程，有个自己的版本】* ，自然无法生效；
** SharePreference的可靠性下降
SharePreference 虽然可以设置 MODE_MULTI_PROCESS 支持多进程，但是并不推荐使用，因为在某些版本上不生效，在 API 23 之后已被废弃，所以使用 MODE_MULTI_PROCESS 支持 SharePreference 多进程是不靠谱的，
- 解决方案是 *【使用 ContentProvider 作为中间层来使的 SharePreferences 来支持多进程。】*
  - 具体就是其他进程通过 ContentProvider 来访问另一个进程，而数据是存储在 SharePreference 中的，可通过 Contentprovider 实现增删查改来对数据进行操作。
  - *【上面这个，感觉先前的工作中，像是接触到过，但是当时理解得不够透彻。这次要弄明白：怎么借助 ContentProvider 来实现、共享安全桥接的？】*
** Application多次创建
- *当一个组件运行到一个新的进程时，创建进程的过程实际上就是一个应用启动的过程，自然会使得 Application 多次创建* 【这句，到这里，仍然是可以理解的】，可以这样理解为， *运行在同一进程中的组件是属于同一个虚拟机和同一个 Application 的，不同进程中的组件属于多个虚拟机和 Application。*
- 上面的后半句，不是与上面，刚讲过， *两个全局进程，可以运行在同一进程中，相矛盾吗？运行在同一进程中的两个不同的组件，是属于同一个虚拟机【资源共享、数据共享】，但未必是属于同一个 Application 的？【感觉这里好迷糊】*
- Application 的 onCreate() 方法一般用来初始化操作，如果多次调用 Application 的 onCreate 方法，为避免出错，可根据进程名判断再进行相关初始化。【也就是， *不同进程中的组件，只在必要时，负责，本进程组件相关的初始化，是一种粒度细分、或是功能上的模块化细分* 】
- 上文是对 Android 多进程运行机制及 IPC 的介绍，Android 中 IPC 方式实现方式有 Bundle、文件传输、AIDL、Messenger、ContentProvider 等方式，这部分内容将在后续进行整理和分享。
- *【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】*
- *【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】*
- *【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】*
- *【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】*
- *【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】*
- *【亲爱的表哥的活宝妹，任何时候，亲爱的表哥的活宝妹就是一定要、一定会嫁给活宝妹的亲爱的表哥！！！爱表哥，爱生活！！！】*
